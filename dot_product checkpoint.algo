// dot product PROCEDURE
PROCEDURE dot_product(n :INTEGER, v1: ARRAY_OF INTEGER,v2: ARRAY_OF INTEGER)
VAR
    i : INTEGER;
    ps: INTEGER := 0; 
BEGIN
    FOR i FROM 0 TO n-1 DO 
        Write('donner les elements de vecteur numero 1 :')
        Read(v1[i])
        Write('donner les elements de vecteur numero 2 :')  
        Read(v2[i]) 
    END_FOR
    FOR i FROM 0 TO n-1 DO 
    ps := ps + (v1[i]*v2[i])
        write(ps)
    END_FOR
// ALGORITHM to verify orthogonal vectors by using the dot product PROCEDURE
    ALGORITHM orthogonal_vectors
    VAR
        n,i : INTEGER;
        v1: ARRAY_OF INTEGER
        v2: ARRAY_OF INTEGER
    BEGIN
        FOR i FROM 0 TO n-1 DO
        IF (dot_product(n,v1,v2)==0) THEN
            write("les vecteurs sont orthogonaux")
        ELSE
            write("les vecteurs ne sont pas orthogonaux")
        END_IF
    END
// dot product FUNCTION 
    FUNCTION dot_product(v1,v2) : INTEGER
    VAR
        i,n : INTEGER;
        ps: INTEGER := 0;
        v1: ARRAY_OF INTEGER
        v2: ARRAY_OF INTEGER
    BEGIN
        FOR i FROM 0 TO n-1 DO 
        Write('donner les elements de vecteur numero 1 :')
        Read(v1[i])
        Write('donner les elements de vecteur numero 2 :')  
        Read(v2[i]) 
    END_FOR
    FOR i FROM 0 TO n-1 DO 
    ps := ps + (v1[i]*v2[i])
        write(ps)
    END_FOR
        RETURN ps ;
    END
// ALGORITHM to verify orthogonal vectors by using the dot product FUNCTION 
    ALGORITHM orthogonal_vectors
    VAR
        n,i : INTEGER;
        v1: ARRAY_OF INTEGER
        v2: ARRAY_OF INTEGER
    BEGIN
        FOR i FROM 0 TO n-1 DO
        IF (ps = dot_product(v1,v2)==0) THEN
            write("les vecteurs sont orthogonaux")
        ELSE
            write("les vecteurs ne sont pas orthogonaux")
        END_IF
    END
END